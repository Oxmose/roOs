/* CTF 1.8 */
trace {
    major = 1;
    minor = 8;

    byte_order = le;

    packet.header := struct {
        integer {
            size = 32;
        } utk_magic;
        integer {
            size = 32;
        } trace_version;
    };
};

clock {
    name = sys_clock;
    freq = 3000000000;
    offset_s = 0;
};

/*******************************************************************************
 * Types definition
 ******************************************************************************/

typealias integer {
    size = 32;
} := uint32_t;

typealias integer {
    base = hex;
    size = 32;
} := xuint32_t;

typealias integer {
    size = 64;
} := uint64_t;

typealias integer {
    base = hex;
    size = 64;
} := xuint64_t;

/*******************************************************************************
 * Stream definition
 ******************************************************************************/

stream {
    event.header := struct {
        uint32_t id;
        uint64_t timestamp;
    };
};

/*******************************************************************************
 * Events definition
 ******************************************************************************/
event {
    id = 1;
    name = "Kernel Kickstart Start";
};

event {
    id = 2;
    name = "Kernel Kickstart End";
};

event {
    id = 3;
    name = "VGA Init Start";
};

event {
    id = 4;
    name = "VGA Init End";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
        uint32_t buff_len;
    };
};

event {
    id = 5;
    name = "CPU Setup GDT Start";
};

event {
    id = 6;
    name = "CPU Setup GDT End";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 7;
    name = "CPU Setup IDT Start";
};

event {
    id = 8;
    name = "CPU Setup IDT End";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 9;
    name = "CPU Setup TSS Start";
};

event {
    id = 10;
    name = "CPU Setup TSS End";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 11;
    name = "CPU Setup Start";
};

event {
    id = 12;
    name = "CPU Setup End";
};

event {
    id = 13;
    name = "CPU Raise Interrupt Start";
    fields := struct {
        uint32_t int_idx;
    };
};

event {
    id = 14;
    name = "CPU Raise Interrupt End";
    fields := struct {
        uint32_t int_idx;
        uint32_t ret_code;
    };
};

event {
    id = 15;
    name = "Kernel Panic Request";
    fields := struct {
        uint32_t code;
    };
};

event {
    id = 16;
    name = "Kernel Panic Handler Start";
    fields := struct {
        uint32_t error_code;
    };
};

event {
    id = 17;
    name = "Kernel Panic Handler End";
    fields := struct {
        uint32_t error_code;
    };
};

event {
    id = 18;
    name = "Disable Interrupts";
};

event {
    id = 19;
    name = "Enable Interrupts";
};

event {
    id = 20;
    name = "Halt System";
};

event {
    id = 21;
    name = "Kernel General Interrupt Handler Start";
    fields := struct {
        uint32_t int_idx;
        uint32_t thread_id;
    };
};

event {
    id = 22;
    name = "Kernel General Interrupt Handler End";
    fields := struct {
        uint32_t int_idx;
        uint32_t thread_id;
    };
};

event {
    id = 23;
    name = "Kernel Interrupt Init Start";
};

event {
    id = 24;
    name = "Kernel Interrupt Init End";
    fields := struct {
        uint32_t code;
    };
};

event {
    id = 25;
    name = "Kernel Interrupt Set Driver Start";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 26;
    name = "Kernel Interrupt Set Driver End";
    fields := struct {
        uint32_t ret_code;
    };
};

event {
    id = 27;
    name = "Kernel Interrupt Register Interrupt Start";
    fields := struct {
        uint32_t int_idx;
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 28;
    name = "Kernel Interrupt Register Interrupt End";
    fields := struct {
        uint32_t int_idx;
        uint32_t ret_code;
    };
};

event {
    id = 29;
    name = "Kernel Interrupt Remove Interrupt Start";
    fields := struct {
        uint32_t int_idx;
    };
};

event {
    id = 30;
    name = "Kernel Interrupt Remove Interrupt End";
    fields := struct {
        uint32_t int_idx;
        uint32_t ret_code;
    };
};

event {
    id = 31;
    name = "Kernel Interrupt Register IRQ Start";
    fields := struct {
        uint32_t irq_idx;
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 32;
    name = "Kernel Interrupt Register IRQ End";
    fields := struct {
        uint32_t irq_idx;
        uint32_t ret_code;
    };
};

event {
    id = 33;
    name = "Kernel Interrupt Remove IRQ Start";
    fields := struct {
        uint32_t irq_idx;
    };
};

event {
    id = 34;
    name = "Kernel Interrupt Remove IRQ End";
    fields := struct {
        uint32_t irq_idx;
        uint32_t ret_code;
    };
};

event {
    id = 35;
    name = "Kernel Interrupt Restore Interrupt";
    fields := struct {
        uint32_t prev_state;
    };
};

event {
    id = 36;
    name = "Kernel Interrupt Disable Interrupt";
    fields := struct {
        uint32_t prev_state;
    };
};

event {
    id = 37;
    name = "Kernel Interrupt Set IRQ Mask";
    fields := struct {
        uint32_t irq_idx;
        uint32_t enabled;
    };
};

event {
    id = 38;
    name = "Kernel Interrupt Set IRQ EOI";
    fields := struct {
        uint32_t irq_idx;
    };
};

event {
    id = 39;
    name = "Kernel Set Console Driver Start";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 40;
    name = "Kernel Set Console Driver End";
    fields := struct {
        uint32_t ret_code;
    };
};

event {
    id = 41;
    name = "Kernel UART Driver Init Start";
};

event {
    id = 42;
    name = "Kernel UART Driver Init End";
};

event {
    id = 43;
    name = "Kernel Main Timer Handler";
};

event {
    id = 44;
    name = "Kernel RTC Timer Handler";
};

event {
    id = 45;
    name = "Kernel Init Timer Manager Start";
    fields := struct {
        xuint32_t main_timer_addr_low;
        xuint32_t main_timer_addr_high;
        xuint32_t rtc_timer_addr_low;
        xuint32_t rtc_timer_addr_high;
    };
};

event {
    id = 46;
    name = "Kernel Init Timer Manager End";
};

event {
    id = 47;
    name = "Kernel Get Current Uptime";
};

event {
    id = 48;
    name = "Kernel Get Tick Count";
    fields := struct {
        xuint32_t tick_low;
        xuint32_t tick_high;
    };
};

event {
    id = 49;
    name = "Kernel Timed Wait Nosched Start";
    fields := struct {
        xuint32_t time_low;
        xuint32_t time_high;
    };
};

event {
    id = 50;
    name = "Kernel Timed Wait Nosched End";
    fields := struct {
        xuint32_t time_low;
        xuint32_t time_high;
    };
};

event {
    id = 51;
    name = "Kernel Time Register Scheduler";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 52;
    name = "Kernel Time Register RTC Manager";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 53;
    name = "Kernel Init PIC Start";
};

event {
    id = 54;
    name = "Kernel Init PIC End";
    fields := struct {
        xuint32_t ret_code;
    };
};

event {
    id = 55;
    name = "Kernel PIC Set IRQ Mask Start";
    fields := struct {
        uint32_t irq_number;
        uint32_t enabled;
    };
};

event {
    id = 56;
    name = "Kernel PIC Set IRQ Mask End";
    fields := struct {
        uint32_t irq_number;
        uint32_t enabled;
    };
};

event {
    id = 57;
    name = "Kernel PIC EOI Start";
    fields := struct {
        uint32_t irq_number;
    };
};

event {
    id = 58;
    name = "Kernel PIC EOI End";
    fields := struct {
        uint32_t irq_number;
    };
};

event {
    id = 59;
    name = "Kernel PIC Spurious Handler Start";
    fields := struct {
        uint32_t int_number;
    };
};

event {
    id = 59;
    name = "Kernel PIC Spurious Handler Start";
    fields := struct {
        uint32_t int_number;
    };
};

event {
    id = 60;
    name = "Kernel PIC Spurious Handler End";
    fields := struct {
        uint32_t int_number;
        uint32_t type_info;
    };
};

event {
    id = 61;
    name = "Kernel PIC Disable";
};

event {
    id = 62;
    name = "Kernel PIC Get Interrupt Line";
    fields := struct {
        uint32_t irq_number;
        uint32_t int_line;
    };
};

event {
    id = 63;
    name = "Kernel PIT Dummy Handler";
};

event {
    id = 64;
    name = "Kernel PIT Init Start";
};

event {
    id = 65;
    name = "Kernel PIT Init End";
    fields := struct {
        uint32_t frequency;
        xuint32_t ret_code;
    };
};

event {
    id = 66;
    name = "Kernel PIT Enable Start";
};

event {
    id = 67;
    name = "Kernel PIT Enable End";
};

event {
    id = 68;
    name = "Kernel PIT Disable Start";
    fields := struct {
        uint32_t nesting;
    };
};

event {
    id = 69;
    name = "Kernel PIT Disable End";
    fields := struct {
        uint32_t nesting;
    };
};

event {
    id = 70;
    name = "Kernel PIT Set Frequency Start";
    fields := struct {
        uint32_t frequency;
    };
};

event {
    id = 71;
    name = "Kernel PIT Set Frequency End";
    fields := struct {
        uint32_t frequency;
    };
};

event {
    id = 72;
    name = "Kernel PIT Set Handler";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 73;
    name = "Kernel PIT Remove Handler";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 74;
    name = "Kernel RTC Dummy Handler";
};

event {
    id = 75;
    name = "Kernel RTC Init Start";
};

event {
    id = 76;
    name = "Kernel RTC Init End";
    fields := struct {
        uint32_t frequency;
    };
};

event {
    id = 77;
    name = "Kernel RTC Enable Start";
};

event {
    id = 78;
    name = "Kernel RTC Enable End";
};

event {
    id = 79;
    name = "Kernel RTC Disable Start";
    fields := struct {
        uint32_t nesting;
    };
};

event {
    id = 80;
    name = "Kernel RTC Disable End";
    fields := struct {
        uint32_t nesting;
    };
};

event {
    id = 81;
    name = "Kernel RTC Set Frequency Start";
    fields := struct {
        uint32_t frequency;
    };
};

event {
    id = 82;
    name = "Kernel RTC Set Frequency End";
    fields := struct {
        uint32_t frequency;
    };
};

event {
    id = 83;
    name = "Kernel RTC Set Handler";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 84;
    name = "Kernel RTC Remove Handler";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 85;
    name = "Kernel RTC Update Time Start";
};

event {
    id = 86;
    name = "Kernel RTC Update Time End";
};

event {
    id = 87;
    name = "Kernel Heap Init Start";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 88;
    name = "Kernel Heap Init End";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
        uint32_t  free_mem;
    };
};

event {
    id = 89;
    name = "Kernel Heap Allocate";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
        uint32_t  size;
        uint32_t  free_mem;
    };
};

event {
    id = 90;
    name = "Kernel Heap Free";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
        uint32_t  free_mem;
    };
};

event {
    id = 91;
    name = "Kernel Validate Architecture Start";
};

event {
    id = 92;
    name = "Kernel Validate Architecture End";
};




